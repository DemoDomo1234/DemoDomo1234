services:

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:15.1
    networks:
      - main
    ports:
      - "5672:5672"
    restart: always
      
  db:
    container_name: postgres
    image: postgres:15.1
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - main
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=youtube
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=demodomo
    restart: always
    
  redis:
    container_name: redis
    image: redis:7.0.8
    networks:
      - main
    
  celery:
    container_name: celery
    command: "celery -A core worker -l INFO"
    build: .
    depends_on:
      - db
      - django
      - rabbitmq
    networks:
      - main
    environment:
      - C_FORCE_ROOT="true"

    restart: always

  django:
    container_name: django
    build: .
    depends_on:
      - db
      - redis
      - rabbitmq
      - celery
      - nginx

    command: sh -c "python manage.py migrate && gunicorn core.wsgi -b 0.0.0.0:8000"
    volumes:
      - .:/usr/src/core
    networks:
      - main
    restart: always
    expose:
      - "8000"
  
  neo4j:
    image: neo4j:${NEO4J_VERSION:-4.4.16-enterprise}
    container_name: neo4j
    restart: always
    env_file: ".env.neo4j.v4.${RUN_ENV}"
    user: "${NEO4J_USER:-7474}:${NEO4J_GROUP:-7474}"
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_allow__upgrade=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.\*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_apoc_trigger_enabled=true
      - NEO4J_dbms_connector_https_advertised__address=${PREFIX}neo4j.${TRAEFIK_HOST}:443
      - NEO4J_dbms_connector_bolt_advertised__address=${PREFIX}neo4jbolt.${TRAEFIK_HOST}:443
      - NEO4J_metrics_csv_enabled=false
      - NEO4J_metrics_prometheus_enabled=true
      - NEO4J_metrics_prometheus_endpoint=0.0.0.0:2004

    labels:
      - "traefik.docker.network=traefik_network"
      - "traefik.enable=true"
      - "traefik.http.services.neo4j${PREFIX}secure.loadbalancer.server.port=7474"
      - "traefik.http.routers.neo4j${PREFIX}secure.service=neo4j${PREFIX}secure"
      - "traefik.http.routers.neo4j${PREFIX}secure.entrypoints=https,https_priv"
      - "traefik.http.routers.neo4j${PREFIX}secure.rule=Host(`${PREFIX}neo4j.${TRAEFIK_HOST}`)"
      - "traefik.http.routers.neo4j${PREFIX}secure.tls.certresolver=gandi-cr"
      - "traefik.tcp.services.neo4j${PREFIX}bolt.loadbalancer.server.port=7687"
      - "traefik.tcp.routers.neo4j${PREFIX}bolt.rule=HostSNI(`${PREFIX}neo4jbolt.${TRAEFIK_HOST}`)"
      - "traefik.tcp.routers.neo4j${PREFIX}bolt.service=neo4j${PREFIX}bolt"
      - "traefik.tcp.routers.neo4j${PREFIX}bolt.tls=true"
      - "traefik.tcp.routers.neo4j${PREFIX}bolt.tls.certresolver=gandi-cr"
      - "traefik.http.services.neo4j${PREFIX}metrics-secure.loadbalancer.server.port=2004"
      - "traefik.http.routers.neo4j${PREFIX}metrics-secure.service=neo4j${PREFIX}metrics-secure"
      - "traefik.http.routers.neo4j${PREFIX}metrics-secure.entrypoints=https_priv"
      - "traefik.http.routers.neo4j${PREFIX}metrics-secure.rule=Host(`${PREFIX}m.${TRAEFIK_HOST_VPC}`)"
    networks:
      - main

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.0
    container_name: elasticsearch
    ports: 
      - "9200:9200"
    environment:
      - ELASTIC_PASSWORD=123change...     
      - discovery.type=single-node
      - xpack.security.enabled=true
      - path.data=/usr/share/elasticsearch/data
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/data:/usr/share/elasticsearch/data 
    networks:
      - main

  logstash:
    image: docker.elastic.co/logstash/logstash:6.4.0
    container_name: logstash
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD="123change..."
      - NODE_NAME=my-logstash
      - XPACK_MONITORING_ENABLED=true
      - PATH_CONFIG=/usr/share/logstash/my-confs
    volumes:
      - ./logstash/conf:/usr/share/logstash/my-confs
      - ./logstash/csv:/usr/share/logstash/csv
    links:
      - elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - main

  kibana:
    image: docker.elastic.co/kibana/kibana:6.4.0
    container_name: kibana
    ports: 
      - "5601:5601"
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD="123change..."
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SERVER_NAME=my-kibana
      - XPACK_SECURITY_ENABLED=true
      - PATH_DATA=/usr/share/kibana/data
    volumes:
      - ./kibana/data:/usr/share/kibana/data
    links:
      - elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - main

  nginx:
    container_name: nginx
    image: nginx:7.0.8
    build: .
    depends_on:
      - db

    command: nginx -g "daemon off;"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - main
    ports:
      - "80:80"
    restart: always

volumes:
  db_data:

networks:
  main: